name: 'Build, Test, Deploy'

permissions:
  id-token: write
  contents: read

on:
  push:
    branches:
      - main
      - beta

env:
  GO_VERSION: '^1.19.2'
  NODE_VERSION: '16'
  WORKSPACE_ARTIFACT_APP: 'gw2auth_background_jobs'
  WORKSPACE_ARTIFACT_CDK: 'cdk_synth'

jobs:
  build_app:
    name: 'Build app'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
      - name: 'Setup go ${{ env.GO_VERSION }}'
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: 'Build app'
        env:
          GOOS: 'linux'
          GOARCH: 'amd64'
        run: (cd src/go && go build -o gw2auth_background_jobs && chmod +x gw2auth_background_jobs)
      - name: 'Store app artifact'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.WORKSPACE_ARTIFACT_APP }}
          path: 'src/go/gw2auth_background_jobs'
          retention-days: 1

  test_app:
    name: 'Test app'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
      - name: 'Setup go ${{ env.GO_VERSION }}'
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: 'Test app'
        run: (cd src/go && go test)

  build_and_synth_cdk:
    name: 'Build and synth cdk'
    runs-on: ubuntu-latest
    needs:
      - build_app
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
      - name: 'SSH Key for CDK'
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: |
            ${{ secrets.CDK_SSH_KEY }}
      - name: 'Checkout submodules'
        run: git submodule update --init --recursive --remote
      - name: 'Download app artifact'
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.WORKSPACE_ARTIFACT_APP }}
          path: .
      - name: 'Setup node ${{ env.NODE_VERSION }}'
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: 'Install cdk'
        run: npm install -g aws-cdk
      - name: 'Install npm dependencies'
        run: (cd src/cdk && npm install)
      - name: 'Build cdk app'
        run: (cd src/cdk && npm run build)
      - name: 'Prepare lambda bundle'
        run: (zip -q src/cdk/gw2auth_background_jobs.zip gw2auth_background_jobs && rm gw2auth_background_jobs)
      - name: 'Synth cdk'
        run: (cd src/cdk && cdk synth)
      - name: 'Store cdk synth artifact'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.WORKSPACE_ARTIFACT_CDK }}
          path: |
            src/cdk/cdk.out/
            src/cdk/cdk.json
          retention-days: 1

  deploy:
    name: 'Deploy'
    if: github.ref == 'refs/heads/beta' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: ${{ (github.ref == 'refs/heads/beta' && 'beta') || (github.ref == 'refs/heads/main' && 'prod') || 'unknown' }}
    needs:
      - build_app
      - test_app
      - build_and_synth_cdk
    steps:
      - name: 'Download cdk synth artifact'
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.WORKSPACE_ARTIFACT_CDK }}
          path: .
      - name: 'Setup node ${{ env.NODE_VERSION }}'
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: 'Install cdk'
        run: npm install -g aws-cdk
      - name: 'AWS Credentials'
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets.AWS_CDK_ROLE }}
          aws-region: ${{ secrets.AWS_CDK_REGION }}
      - name: 'Deploy beta'
        if: github.ref == 'refs/heads/beta'
        run: (cdk --app ./cdk.out deploy --require-approval never Gw2AuthBackgroundJobs-Beta)
      - name: 'Deploy prod'
        if: github.ref == 'refs/heads/main'
        run: (cdk --app ./cdk.out deploy --require-approval never --no-execute Gw2AuthBackgroundJobs-Prod)

  create_pull_request:
    name: 'Create PR'
    if: github.ref == 'refs/heads/beta'
    runs-on: ubuntu-latest
    needs:
      - deploy
    permissions:
      pull-requests: write
    steps:
      - name: 'Create PR'
        uses: actions/github-script@v6
        with:
          script: |
            const { repo, owner } = context.repo;
            const result = await github.rest.pulls.create({
              title: '[CI] Merge beta into main',
              owner: owner,
              repo: repo,
              head: '${{ github.ref_name }}',
              base: 'main',
              body: 'This PR is auto-generated by\n[actions/github-script](https://github.com/actions/github-script)'
            });
